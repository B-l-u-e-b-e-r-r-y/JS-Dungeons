{"version":3,"sources":["common.js","NumberCard/Multiplication.js","NumberCard/NumberCard.js","Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["common","min","max","numArray","i","push","Multiplication","props","total","number","index","className","NumberCard","getNumberArray","state","numbers","this","map","n","key","Component","Title","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6VAWeA,E,uGAVIC,EAAKC,GAEhB,IADA,IAAMC,EAAW,GACRC,EAAIH,EAAKG,EAAIF,EAAKE,IACvBD,EAASE,KAAKD,GAGlB,OAAOD,M,KCKAG,G,MATQ,SAACC,GACpB,IAAMC,EAAQD,EAAME,OAASF,EAAMG,MACnC,OACI,yBAAKC,UAAU,kBACX,8BAAQJ,EAAME,OAAd,SAA2BF,EAAMG,MAAjC,WAA6CF,MCyB1CI,G,kBA1BX,WAAYL,GAAQ,IAAD,sBACf,4CAAMA,IAEN,IAAMJ,GAAW,IAAIH,GAASa,eAAe,EAAG,IAHjC,OAIf,EAAKC,MAAQ,CACTC,QAASZ,GALE,E,sEAST,IAAD,OACL,OACI,yBAAKQ,UAAU,eACX,4BAAMK,KAAKT,MAAME,QACfO,KAAKF,MAAMC,QAAQE,KAAI,SAACC,EAAGR,GACzB,OACI,kBAAC,EAAD,CACAD,OAAS,EAAKF,MAAME,OACpBC,MAAQQ,EACRC,IAAMT,Y,GAnBLU,cCWVC,G,MAbD,SAACd,GACX,OACI,yBAAKI,UAAU,SACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,QACX,8DACA,qDAEJ,yBAAKA,UAAU,aCmBZW,G,kBAvBb,aAAe,IAAD,sBACZ,8CAEA,IAAMnB,GAAW,IAAIH,GAASa,eAAe,EAAG,IAHpC,OAIZ,EAAKC,MAAQ,CACXC,QAASZ,GALC,E,sEAUZ,OACE,yBAAKQ,UAAU,OACb,kBAAC,EAAD,MACEK,KAAKF,MAAMC,QAAQE,KAAI,SAACC,EAAGR,GAC3B,OACE,kBAAC,EAAD,CAAYD,OAASS,EAAIC,IAAMT,Y,GAhBzBU,cCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2742d281.chunk.js","sourcesContent":["class common {\r\n    getNumberArray(min, max) {\r\n        const numArray = [];\r\n        for (let i = min; i < max; i++) {\r\n            numArray.push(i);\r\n        }\r\n\r\n        return numArray;\r\n    }\r\n}\r\n\r\nexport default common;","import React from 'react';\r\nimport './Multiplication.css';\r\n\r\nconst Multiplication = (props) => {\r\n    const total = props.number * props.index;\r\n    return (\r\n        <div className=\"multiplication\">\r\n            <span>{ props.number } × { props.index } ＝ { total }</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Multiplication;","import React, { Component } from 'react';\r\nimport Multiplication from './Multiplication';\r\nimport common from '../common';\r\nimport './NumberCard.css';\r\n\r\nclass NumberCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const numArray = new common().getNumberArray(1, 10);\r\n        this.state = {\r\n            numbers: numArray\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"number-card\">\r\n                <h1>{ this.props.number }</h1>\r\n                { this.state.numbers.map((n, index) => {\r\n                    return (\r\n                        <Multiplication\r\n                        number={ this.props.number }\r\n                        index={ n }\r\n                        key={ index }/>\r\n                    );\r\n                }) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberCard;","import React from 'react';\r\nimport './Title.css';\r\n\r\nconst Title = (props) => {\r\n    return (\r\n        <div className=\"title\">\r\n            <div className=\"lines\"></div>\r\n            <div className=\"text\">\r\n                <h1>九九乘法表</h1>\r\n                <h2>MULTIPLICATION CHART</h2>\r\n            </div>\r\n            <div className=\"lines\"></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React, { Component } from 'react';\nimport common from './common';\nimport NumberCard from './NumberCard/NumberCard';\nimport Title from './Title/Title';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    const numArray = new common().getNumberArray(2, 10);\n    this.state = {\n      numbers: numArray\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Title />\n        { this.state.numbers.map((n, index) => {\n          return (\n            <NumberCard number={ n } key={ index } />\n          );\n        }) }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}